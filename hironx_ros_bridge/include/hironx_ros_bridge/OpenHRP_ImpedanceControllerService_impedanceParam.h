// Generated by gencpp from file hironx_ros_bridge/OpenHRP_ImpedanceControllerService_impedanceParam.msg
// DO NOT EDIT!


#ifndef HIRONX_ROS_BRIDGE_MESSAGE_OPENHRP_IMPEDANCECONTROLLERSERVICE_IMPEDANCEPARAM_H
#define HIRONX_ROS_BRIDGE_MESSAGE_OPENHRP_IMPEDANCECONTROLLERSERVICE_IMPEDANCEPARAM_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hironx_ros_bridge
{
template <class ContainerAllocator>
struct OpenHRP_ImpedanceControllerService_impedanceParam_
{
  typedef OpenHRP_ImpedanceControllerService_impedanceParam_<ContainerAllocator> Type;

  OpenHRP_ImpedanceControllerService_impedanceParam_()
    : name()
    , base_name()
    , target_name()
    , M_p(0.0)
    , D_p(0.0)
    , K_p(0.0)
    , M_r(0.0)
    , D_r(0.0)
    , K_r(0.0)
    , ref_force()
    , force_gain()
    , ref_moment()
    , moment_gain()
    , sr_gain(0.0)
    , avoid_gain(0.0)
    , reference_gain(0.0)
    , manipulability_limit(0.0)  {
      ref_force.assign(0.0);

      force_gain.assign(0.0);

      ref_moment.assign(0.0);

      moment_gain.assign(0.0);
  }
  OpenHRP_ImpedanceControllerService_impedanceParam_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , base_name(_alloc)
    , target_name(_alloc)
    , M_p(0.0)
    , D_p(0.0)
    , K_p(0.0)
    , M_r(0.0)
    , D_r(0.0)
    , K_r(0.0)
    , ref_force()
    , force_gain()
    , ref_moment()
    , moment_gain()
    , sr_gain(0.0)
    , avoid_gain(0.0)
    , reference_gain(0.0)
    , manipulability_limit(0.0)  {
  (void)_alloc;
      ref_force.assign(0.0);

      force_gain.assign(0.0);

      ref_moment.assign(0.0);

      moment_gain.assign(0.0);
  }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _base_name_type;
  _base_name_type base_name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _target_name_type;
  _target_name_type target_name;

   typedef double _M_p_type;
  _M_p_type M_p;

   typedef double _D_p_type;
  _D_p_type D_p;

   typedef double _K_p_type;
  _K_p_type K_p;

   typedef double _M_r_type;
  _M_r_type M_r;

   typedef double _D_r_type;
  _D_r_type D_r;

   typedef double _K_r_type;
  _K_r_type K_r;

   typedef boost::array<double, 3>  _ref_force_type;
  _ref_force_type ref_force;

   typedef boost::array<double, 3>  _force_gain_type;
  _force_gain_type force_gain;

   typedef boost::array<double, 3>  _ref_moment_type;
  _ref_moment_type ref_moment;

   typedef boost::array<double, 3>  _moment_gain_type;
  _moment_gain_type moment_gain;

   typedef double _sr_gain_type;
  _sr_gain_type sr_gain;

   typedef double _avoid_gain_type;
  _avoid_gain_type avoid_gain;

   typedef double _reference_gain_type;
  _reference_gain_type reference_gain;

   typedef double _manipulability_limit_type;
  _manipulability_limit_type manipulability_limit;




  typedef boost::shared_ptr< ::hironx_ros_bridge::OpenHRP_ImpedanceControllerService_impedanceParam_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hironx_ros_bridge::OpenHRP_ImpedanceControllerService_impedanceParam_<ContainerAllocator> const> ConstPtr;

}; // struct OpenHRP_ImpedanceControllerService_impedanceParam_

typedef ::hironx_ros_bridge::OpenHRP_ImpedanceControllerService_impedanceParam_<std::allocator<void> > OpenHRP_ImpedanceControllerService_impedanceParam;

typedef boost::shared_ptr< ::hironx_ros_bridge::OpenHRP_ImpedanceControllerService_impedanceParam > OpenHRP_ImpedanceControllerService_impedanceParamPtr;
typedef boost::shared_ptr< ::hironx_ros_bridge::OpenHRP_ImpedanceControllerService_impedanceParam const> OpenHRP_ImpedanceControllerService_impedanceParamConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hironx_ros_bridge::OpenHRP_ImpedanceControllerService_impedanceParam_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hironx_ros_bridge::OpenHRP_ImpedanceControllerService_impedanceParam_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace hironx_ros_bridge

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'hironx_ros_bridge': ['/home/pazeshun/test_ws/src/rtmros_hironx/hironx_ros_bridge/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::hironx_ros_bridge::OpenHRP_ImpedanceControllerService_impedanceParam_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hironx_ros_bridge::OpenHRP_ImpedanceControllerService_impedanceParam_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hironx_ros_bridge::OpenHRP_ImpedanceControllerService_impedanceParam_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hironx_ros_bridge::OpenHRP_ImpedanceControllerService_impedanceParam_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hironx_ros_bridge::OpenHRP_ImpedanceControllerService_impedanceParam_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hironx_ros_bridge::OpenHRP_ImpedanceControllerService_impedanceParam_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hironx_ros_bridge::OpenHRP_ImpedanceControllerService_impedanceParam_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7dc56fbf308dcfe16e93246b16e80720";
  }

  static const char* value(const ::hironx_ros_bridge::OpenHRP_ImpedanceControllerService_impedanceParam_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7dc56fbf308dcfe1ULL;
  static const uint64_t static_value2 = 0x6e93246b16e80720ULL;
};

template<class ContainerAllocator>
struct DataType< ::hironx_ros_bridge::OpenHRP_ImpedanceControllerService_impedanceParam_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hironx_ros_bridge/OpenHRP_ImpedanceControllerService_impedanceParam";
  }

  static const char* value(const ::hironx_ros_bridge::OpenHRP_ImpedanceControllerService_impedanceParam_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hironx_ros_bridge::OpenHRP_ImpedanceControllerService_impedanceParam_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string name\n\
string base_name\n\
string target_name\n\
float64 M_p\n\
float64 D_p\n\
float64 K_p\n\
float64 M_r\n\
float64 D_r\n\
float64 K_r\n\
float64[3] ref_force\n\
float64[3] force_gain\n\
float64[3] ref_moment\n\
float64[3] moment_gain\n\
float64 sr_gain\n\
float64 avoid_gain\n\
float64 reference_gain\n\
float64 manipulability_limit\n\
";
  }

  static const char* value(const ::hironx_ros_bridge::OpenHRP_ImpedanceControllerService_impedanceParam_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hironx_ros_bridge::OpenHRP_ImpedanceControllerService_impedanceParam_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.base_name);
      stream.next(m.target_name);
      stream.next(m.M_p);
      stream.next(m.D_p);
      stream.next(m.K_p);
      stream.next(m.M_r);
      stream.next(m.D_r);
      stream.next(m.K_r);
      stream.next(m.ref_force);
      stream.next(m.force_gain);
      stream.next(m.ref_moment);
      stream.next(m.moment_gain);
      stream.next(m.sr_gain);
      stream.next(m.avoid_gain);
      stream.next(m.reference_gain);
      stream.next(m.manipulability_limit);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct OpenHRP_ImpedanceControllerService_impedanceParam_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hironx_ros_bridge::OpenHRP_ImpedanceControllerService_impedanceParam_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hironx_ros_bridge::OpenHRP_ImpedanceControllerService_impedanceParam_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "base_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.base_name);
    s << indent << "target_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.target_name);
    s << indent << "M_p: ";
    Printer<double>::stream(s, indent + "  ", v.M_p);
    s << indent << "D_p: ";
    Printer<double>::stream(s, indent + "  ", v.D_p);
    s << indent << "K_p: ";
    Printer<double>::stream(s, indent + "  ", v.K_p);
    s << indent << "M_r: ";
    Printer<double>::stream(s, indent + "  ", v.M_r);
    s << indent << "D_r: ";
    Printer<double>::stream(s, indent + "  ", v.D_r);
    s << indent << "K_r: ";
    Printer<double>::stream(s, indent + "  ", v.K_r);
    s << indent << "ref_force[]" << std::endl;
    for (size_t i = 0; i < v.ref_force.size(); ++i)
    {
      s << indent << "  ref_force[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.ref_force[i]);
    }
    s << indent << "force_gain[]" << std::endl;
    for (size_t i = 0; i < v.force_gain.size(); ++i)
    {
      s << indent << "  force_gain[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.force_gain[i]);
    }
    s << indent << "ref_moment[]" << std::endl;
    for (size_t i = 0; i < v.ref_moment.size(); ++i)
    {
      s << indent << "  ref_moment[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.ref_moment[i]);
    }
    s << indent << "moment_gain[]" << std::endl;
    for (size_t i = 0; i < v.moment_gain.size(); ++i)
    {
      s << indent << "  moment_gain[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.moment_gain[i]);
    }
    s << indent << "sr_gain: ";
    Printer<double>::stream(s, indent + "  ", v.sr_gain);
    s << indent << "avoid_gain: ";
    Printer<double>::stream(s, indent + "  ", v.avoid_gain);
    s << indent << "reference_gain: ";
    Printer<double>::stream(s, indent + "  ", v.reference_gain);
    s << indent << "manipulability_limit: ";
    Printer<double>::stream(s, indent + "  ", v.manipulability_limit);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HIRONX_ROS_BRIDGE_MESSAGE_OPENHRP_IMPEDANCECONTROLLERSERVICE_IMPEDANCEPARAM_H
