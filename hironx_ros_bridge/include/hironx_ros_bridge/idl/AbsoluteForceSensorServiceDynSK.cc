// This file is generated by omniidl (C++ backend) - omniORB_4_1. Do not edit.

#include "AbsoluteForceSensorService.hh"

OMNI_USING_NAMESPACE(omni)

static const char* _0RL_dyn_library_version = omniORB_4_1_dyn;

static ::CORBA::TypeCode::_Tracker _0RL_tcTrack(__FILE__);

static CORBA::TypeCode_ptr _0RL_tc_OpenHRP_mAbsoluteForceSensorService_mDblSequence3 = CORBA::TypeCode::PR_alias_tc("IDL:OpenHRP/AbsoluteForceSensorService/DblSequence3:1.0", "DblSequence3", CORBA::TypeCode::PR_sequence_tc(3, CORBA::TypeCode::PR_double_tc(), &_0RL_tcTrack), &_0RL_tcTrack);


const CORBA::TypeCode_ptr OpenHRP::AbsoluteForceSensorService::_tc_DblSequence3 = _0RL_tc_OpenHRP_mAbsoluteForceSensorService_mDblSequence3;

static CORBA::PR_structMember _0RL_structmember_OpenHRP_mAbsoluteForceSensorService_mforcemomentOffsetParam[] = {
  {"force_offset", _0RL_tc_OpenHRP_mAbsoluteForceSensorService_mDblSequence3},
  {"moment_offset", _0RL_tc_OpenHRP_mAbsoluteForceSensorService_mDblSequence3},
  {"link_offset_centroid", _0RL_tc_OpenHRP_mAbsoluteForceSensorService_mDblSequence3},
  {"link_offset_mass", CORBA::TypeCode::PR_double_tc()}
};

#ifdef _0RL_tc_OpenHRP_mAbsoluteForceSensorService_mforcemomentOffsetParam
#  undef _0RL_tc_OpenHRP_mAbsoluteForceSensorService_mforcemomentOffsetParam
#endif
static CORBA::TypeCode_ptr _0RL_tc_OpenHRP_mAbsoluteForceSensorService_mforcemomentOffsetParam = CORBA::TypeCode::PR_struct_tc("IDL:OpenHRP/AbsoluteForceSensorService/forcemomentOffsetParam:1.0", "forcemomentOffsetParam", _0RL_structmember_OpenHRP_mAbsoluteForceSensorService_mforcemomentOffsetParam, 4, &_0RL_tcTrack);

const CORBA::TypeCode_ptr OpenHRP::AbsoluteForceSensorService::_tc_forcemomentOffsetParam = _0RL_tc_OpenHRP_mAbsoluteForceSensorService_mforcemomentOffsetParam;


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace OpenHRP { 
  const ::CORBA::TypeCode_ptr _tc_AbsoluteForceSensorService = CORBA::TypeCode::PR_interface_tc("IDL:OpenHRP/AbsoluteForceSensorService:1.0", "AbsoluteForceSensorService", &_0RL_tcTrack);
} 
#else
const ::CORBA::TypeCode_ptr OpenHRP::_tc_AbsoluteForceSensorService = CORBA::TypeCode::PR_interface_tc("IDL:OpenHRP/AbsoluteForceSensorService:1.0", "AbsoluteForceSensorService", &_0RL_tcTrack);
#endif

static void _0RL_OpenHRP_mAbsoluteForceSensorService_mDblSequence3_marshal_fn(cdrStream& _s, void* _v)
{
  OpenHRP::AbsoluteForceSensorService::DblSequence3* _p = (OpenHRP::AbsoluteForceSensorService::DblSequence3*)_v;
  *_p >>= _s;
}
static void _0RL_OpenHRP_mAbsoluteForceSensorService_mDblSequence3_unmarshal_fn(cdrStream& _s, void*& _v)
{
  OpenHRP::AbsoluteForceSensorService::DblSequence3* _p = new OpenHRP::AbsoluteForceSensorService::DblSequence3;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_OpenHRP_mAbsoluteForceSensorService_mDblSequence3_destructor_fn(void* _v)
{
  OpenHRP::AbsoluteForceSensorService::DblSequence3* _p = (OpenHRP::AbsoluteForceSensorService::DblSequence3*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const OpenHRP::AbsoluteForceSensorService::DblSequence3& _s)
{
  OpenHRP::AbsoluteForceSensorService::DblSequence3* _p = new OpenHRP::AbsoluteForceSensorService::DblSequence3(_s);
  _a.PR_insert(_0RL_tc_OpenHRP_mAbsoluteForceSensorService_mDblSequence3,
               _0RL_OpenHRP_mAbsoluteForceSensorService_mDblSequence3_marshal_fn,
               _0RL_OpenHRP_mAbsoluteForceSensorService_mDblSequence3_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, OpenHRP::AbsoluteForceSensorService::DblSequence3* _sp)
{
  _a.PR_insert(_0RL_tc_OpenHRP_mAbsoluteForceSensorService_mDblSequence3,
               _0RL_OpenHRP_mAbsoluteForceSensorService_mDblSequence3_marshal_fn,
               _0RL_OpenHRP_mAbsoluteForceSensorService_mDblSequence3_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, OpenHRP::AbsoluteForceSensorService::DblSequence3*& _sp)
{
  return _a >>= (const OpenHRP::AbsoluteForceSensorService::DblSequence3*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const OpenHRP::AbsoluteForceSensorService::DblSequence3*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_OpenHRP_mAbsoluteForceSensorService_mDblSequence3,
                    _0RL_OpenHRP_mAbsoluteForceSensorService_mDblSequence3_unmarshal_fn,
                    _0RL_OpenHRP_mAbsoluteForceSensorService_mDblSequence3_marshal_fn,
                    _0RL_OpenHRP_mAbsoluteForceSensorService_mDblSequence3_destructor_fn,
                    _v)) {
    _sp = (const OpenHRP::AbsoluteForceSensorService::DblSequence3*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_OpenHRP_mAbsoluteForceSensorService_mforcemomentOffsetParam_marshal_fn(cdrStream& _s, void* _v)
{
  OpenHRP::AbsoluteForceSensorService::forcemomentOffsetParam* _p = (OpenHRP::AbsoluteForceSensorService::forcemomentOffsetParam*)_v;
  *_p >>= _s;
}
static void _0RL_OpenHRP_mAbsoluteForceSensorService_mforcemomentOffsetParam_unmarshal_fn(cdrStream& _s, void*& _v)
{
  OpenHRP::AbsoluteForceSensorService::forcemomentOffsetParam* _p = new OpenHRP::AbsoluteForceSensorService::forcemomentOffsetParam;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_OpenHRP_mAbsoluteForceSensorService_mforcemomentOffsetParam_destructor_fn(void* _v)
{
  OpenHRP::AbsoluteForceSensorService::forcemomentOffsetParam* _p = (OpenHRP::AbsoluteForceSensorService::forcemomentOffsetParam*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const OpenHRP::AbsoluteForceSensorService::forcemomentOffsetParam& _s)
{
  OpenHRP::AbsoluteForceSensorService::forcemomentOffsetParam* _p = new OpenHRP::AbsoluteForceSensorService::forcemomentOffsetParam(_s);
  _a.PR_insert(_0RL_tc_OpenHRP_mAbsoluteForceSensorService_mforcemomentOffsetParam,
               _0RL_OpenHRP_mAbsoluteForceSensorService_mforcemomentOffsetParam_marshal_fn,
               _0RL_OpenHRP_mAbsoluteForceSensorService_mforcemomentOffsetParam_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, OpenHRP::AbsoluteForceSensorService::forcemomentOffsetParam* _sp)
{
  _a.PR_insert(_0RL_tc_OpenHRP_mAbsoluteForceSensorService_mforcemomentOffsetParam,
               _0RL_OpenHRP_mAbsoluteForceSensorService_mforcemomentOffsetParam_marshal_fn,
               _0RL_OpenHRP_mAbsoluteForceSensorService_mforcemomentOffsetParam_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, OpenHRP::AbsoluteForceSensorService::forcemomentOffsetParam*& _sp)
{
  return _a >>= (const OpenHRP::AbsoluteForceSensorService::forcemomentOffsetParam*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const OpenHRP::AbsoluteForceSensorService::forcemomentOffsetParam*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_OpenHRP_mAbsoluteForceSensorService_mforcemomentOffsetParam,
                    _0RL_OpenHRP_mAbsoluteForceSensorService_mforcemomentOffsetParam_unmarshal_fn,
                    _0RL_OpenHRP_mAbsoluteForceSensorService_mforcemomentOffsetParam_marshal_fn,
                    _0RL_OpenHRP_mAbsoluteForceSensorService_mforcemomentOffsetParam_destructor_fn,
                    _v)) {
    _sp = (const OpenHRP::AbsoluteForceSensorService::forcemomentOffsetParam*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_OpenHRP_mAbsoluteForceSensorService_marshal_fn(cdrStream& _s, void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  omniObjRef::_marshal(_o, _s);
}
static void _0RL_OpenHRP_mAbsoluteForceSensorService_unmarshal_fn(cdrStream& _s, void*& _v)
{
  omniObjRef* _o = omniObjRef::_unMarshal(OpenHRP::AbsoluteForceSensorService::_PD_repoId, _s);
  _v = _o;
}
static void _0RL_OpenHRP_mAbsoluteForceSensorService_destructor_fn(void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  if (_o)
    omni::releaseObjRef(_o);
}

void operator<<=(::CORBA::Any& _a, OpenHRP::AbsoluteForceSensorService_ptr _o)
{
  OpenHRP::AbsoluteForceSensorService_ptr _no = OpenHRP::AbsoluteForceSensorService::_duplicate(_o);
  _a.PR_insert(OpenHRP::_tc_AbsoluteForceSensorService,
               _0RL_OpenHRP_mAbsoluteForceSensorService_marshal_fn,
               _0RL_OpenHRP_mAbsoluteForceSensorService_destructor_fn,
               _no->_PR_getobj());
}
void operator<<=(::CORBA::Any& _a, OpenHRP::AbsoluteForceSensorService_ptr* _op)
{
  _a.PR_insert(OpenHRP::_tc_AbsoluteForceSensorService,
               _0RL_OpenHRP_mAbsoluteForceSensorService_marshal_fn,
               _0RL_OpenHRP_mAbsoluteForceSensorService_destructor_fn,
               (*_op)->_PR_getobj());
  *_op = OpenHRP::AbsoluteForceSensorService::_nil();
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, OpenHRP::AbsoluteForceSensorService_ptr& _o)
{
  void* _v;
  if (_a.PR_extract(OpenHRP::_tc_AbsoluteForceSensorService,
                    _0RL_OpenHRP_mAbsoluteForceSensorService_unmarshal_fn,
                    _0RL_OpenHRP_mAbsoluteForceSensorService_marshal_fn,
                    _0RL_OpenHRP_mAbsoluteForceSensorService_destructor_fn,
                    _v)) {
    omniObjRef* _r = (omniObjRef*)_v;
    if (_r)
      _o = (OpenHRP::AbsoluteForceSensorService_ptr)_r->_ptrToObjRef(OpenHRP::AbsoluteForceSensorService::_PD_repoId);
    else
      _o = OpenHRP::AbsoluteForceSensorService::_nil();
    return 1;
  }
  return 0;
}

