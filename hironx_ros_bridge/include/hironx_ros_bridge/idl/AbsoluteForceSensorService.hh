// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.
#ifndef __AbsoluteForceSensorService_hh__
#define __AbsoluteForceSensorService_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_AbsoluteForceSensorService
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_AbsoluteForceSensorService
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_AbsoluteForceSensorService
#endif






#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif





_CORBA_MODULE OpenHRP

_CORBA_MODULE_BEG

#ifndef __OpenHRP_mAbsoluteForceSensorService__
#define __OpenHRP_mAbsoluteForceSensorService__

  class AbsoluteForceSensorService;
  class _objref_AbsoluteForceSensorService;
  class _impl_AbsoluteForceSensorService;
  
  typedef _objref_AbsoluteForceSensorService* AbsoluteForceSensorService_ptr;
  typedef AbsoluteForceSensorService_ptr AbsoluteForceSensorServiceRef;

  class AbsoluteForceSensorService_Helper {
  public:
    typedef AbsoluteForceSensorService_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_AbsoluteForceSensorService, AbsoluteForceSensorService_Helper> AbsoluteForceSensorService_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_AbsoluteForceSensorService,AbsoluteForceSensorService_Helper > AbsoluteForceSensorService_out;

#endif

  // interface AbsoluteForceSensorService
  class AbsoluteForceSensorService {
  public:
    // Declarations for this interface type.
    typedef AbsoluteForceSensorService_ptr _ptr_type;
    typedef AbsoluteForceSensorService_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_DblSequence3;

    class DblSequence3_var;

    class DblSequence3 : public _CORBA_Bounded_Sequence_w_FixSizeElement< ::CORBA::Double, 3, 8, 8 >  {
    public:
      typedef DblSequence3_var _var_type;
      inline DblSequence3() {}
      inline DblSequence3(const DblSequence3& _s)
        : _CORBA_Bounded_Sequence_w_FixSizeElement< ::CORBA::Double, 3, 8, 8 > (_s) {}

      inline DblSequence3(_CORBA_ULong _len, ::CORBA::Double* _val, _CORBA_Boolean _rel=0)
        : _CORBA_Bounded_Sequence_w_FixSizeElement< ::CORBA::Double, 3, 8, 8 > (_len, _val, _rel) {}

    

      inline DblSequence3& operator = (const DblSequence3& _s) {
        _CORBA_Bounded_Sequence_w_FixSizeElement< ::CORBA::Double, 3, 8, 8 > ::operator=(_s);
        return *this;
      }
    };

    class DblSequence3_out;

    class DblSequence3_var {
    public:
      inline DblSequence3_var() : _pd_seq(0) {}
      inline DblSequence3_var(DblSequence3* _s) : _pd_seq(_s) {}
      inline DblSequence3_var(const DblSequence3_var& _s) {
        if( _s._pd_seq )  _pd_seq = new DblSequence3(*_s._pd_seq);
        else              _pd_seq = 0;
      }
      inline ~DblSequence3_var() { if( _pd_seq )  delete _pd_seq; }
        
      inline DblSequence3_var& operator = (DblSequence3* _s) {
        if( _pd_seq )  delete _pd_seq;
        _pd_seq = _s;
        return *this;
      }
      inline DblSequence3_var& operator = (const DblSequence3_var& _s) {
        if( _s._pd_seq ) {
          if( !_pd_seq )  _pd_seq = new DblSequence3;
          *_pd_seq = *_s._pd_seq;
        } else if( _pd_seq ) {
          delete _pd_seq;
          _pd_seq = 0;
        }
        return *this;
      }
      inline ::CORBA::Double& operator [] (_CORBA_ULong _s) {
        return (*_pd_seq)[_s];
      }

    

      inline DblSequence3* operator -> () { return _pd_seq; }
      inline const DblSequence3* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
      inline operator DblSequence3& () const { return *_pd_seq; }
#else
      inline operator const DblSequence3& () const { return *_pd_seq; }
      inline operator DblSequence3& () { return *_pd_seq; }
#endif
        
      inline const DblSequence3& in() const { return *_pd_seq; }
      inline DblSequence3&       inout()    { return *_pd_seq; }
      inline DblSequence3*&      out() {
        if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
        return _pd_seq;
      }
      inline DblSequence3* _retn() { DblSequence3* tmp = _pd_seq; _pd_seq = 0; return tmp; }
        
      friend class DblSequence3_out;
      
    private:
      DblSequence3* _pd_seq;
    };

    class DblSequence3_out {
    public:
      inline DblSequence3_out(DblSequence3*& _s) : _data(_s) { _data = 0; }
      inline DblSequence3_out(DblSequence3_var& _s)
        : _data(_s._pd_seq) { _s = (DblSequence3*) 0; }
      inline DblSequence3_out(const DblSequence3_out& _s) : _data(_s._data) {}
      inline DblSequence3_out& operator = (const DblSequence3_out& _s) {
        _data = _s._data;
        return *this;
      }
      inline DblSequence3_out& operator = (DblSequence3* _s) {
        _data = _s;
        return *this;
      }
      inline operator DblSequence3*&()  { return _data; }
      inline DblSequence3*& ptr()       { return _data; }
      inline DblSequence3* operator->() { return _data; }

      inline ::CORBA::Double& operator [] (_CORBA_ULong _i) {
        return (*_data)[_i];
      }

    

      DblSequence3*& _data;

    private:
      DblSequence3_out();
      DblSequence3_out& operator=(const DblSequence3_var&);
    };

    struct forcemomentOffsetParam {
      typedef _CORBA_ConstrType_Variable_Var<forcemomentOffsetParam> _var_type;

      
      DblSequence3 force_offset;

      DblSequence3 moment_offset;

      DblSequence3 link_offset_centroid;

      ::CORBA::Double link_offset_mass;

    

      void operator>>= (cdrStream &) const;
      void operator<<= (cdrStream &);
    };

    typedef forcemomentOffsetParam::_var_type forcemomentOffsetParam_var;

    typedef _CORBA_ConstrType_Variable_OUT_arg< forcemomentOffsetParam,forcemomentOffsetParam_var > forcemomentOffsetParam_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_forcemomentOffsetParam;

  
  };

  class _objref_AbsoluteForceSensorService :
    public virtual ::CORBA::Object,
    public virtual omniObjRef
  {
  public:
    ::CORBA::Boolean setForceMomentOffsetParam(const char* name, const ::OpenHRP::AbsoluteForceSensorService::forcemomentOffsetParam& i_param);
    ::CORBA::Boolean getForceMomentOffsetParam(const char* name, ::OpenHRP::AbsoluteForceSensorService::forcemomentOffsetParam_out i_param);

    inline _objref_AbsoluteForceSensorService()  { _PR_setobj(0); }  // nil
    _objref_AbsoluteForceSensorService(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_AbsoluteForceSensorService();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_AbsoluteForceSensorService(const _objref_AbsoluteForceSensorService&);
    _objref_AbsoluteForceSensorService& operator = (const _objref_AbsoluteForceSensorService&);
    // not implemented

    friend class AbsoluteForceSensorService;
  };

  class _pof_AbsoluteForceSensorService : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_AbsoluteForceSensorService() : _OMNI_NS(proxyObjectFactory)(AbsoluteForceSensorService::_PD_repoId) {}
    virtual ~_pof_AbsoluteForceSensorService();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_AbsoluteForceSensorService :
    public virtual omniServant
  {
  public:
    virtual ~_impl_AbsoluteForceSensorService();

    virtual ::CORBA::Boolean setForceMomentOffsetParam(const char* name, const ::OpenHRP::AbsoluteForceSensorService::forcemomentOffsetParam& i_param) = 0;
    virtual ::CORBA::Boolean getForceMomentOffsetParam(const char* name, ::OpenHRP::AbsoluteForceSensorService::forcemomentOffsetParam_out i_param) = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_AbsoluteForceSensorService;

_CORBA_MODULE_END



_CORBA_MODULE POA_OpenHRP
_CORBA_MODULE_BEG

  class AbsoluteForceSensorService :
    public virtual OpenHRP::_impl_AbsoluteForceSensorService,
    public virtual ::PortableServer::ServantBase
  {
  public:
    virtual ~AbsoluteForceSensorService();

    inline ::OpenHRP::AbsoluteForceSensorService_ptr _this() {
      return (::OpenHRP::AbsoluteForceSensorService_ptr) _do_this(::OpenHRP::AbsoluteForceSensorService::_PD_repoId);
    }
  };

_CORBA_MODULE_END



_CORBA_MODULE OBV_OpenHRP
_CORBA_MODULE_BEG

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr

void operator<<=(::CORBA::Any& _a, const OpenHRP::AbsoluteForceSensorService::DblSequence3& _s);
void operator<<=(::CORBA::Any& _a, OpenHRP::AbsoluteForceSensorService::DblSequence3* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, OpenHRP::AbsoluteForceSensorService::DblSequence3*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const OpenHRP::AbsoluteForceSensorService::DblSequence3*& _sp);

extern void operator<<=(::CORBA::Any& _a, const OpenHRP::AbsoluteForceSensorService::forcemomentOffsetParam& _s);
extern void operator<<=(::CORBA::Any& _a, OpenHRP::AbsoluteForceSensorService::forcemomentOffsetParam* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, OpenHRP::AbsoluteForceSensorService::forcemomentOffsetParam*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const OpenHRP::AbsoluteForceSensorService::forcemomentOffsetParam*& _sp);

void operator<<=(::CORBA::Any& _a, OpenHRP::AbsoluteForceSensorService_ptr _s);
void operator<<=(::CORBA::Any& _a, OpenHRP::AbsoluteForceSensorService_ptr* _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, OpenHRP::AbsoluteForceSensorService_ptr& _s);



inline void
OpenHRP::AbsoluteForceSensorService::_marshalObjRef(::OpenHRP::AbsoluteForceSensorService_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}




#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_AbsoluteForceSensorService
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_AbsoluteForceSensorService
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_AbsoluteForceSensorService
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_AbsoluteForceSensorService
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_AbsoluteForceSensorService
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_AbsoluteForceSensorService
#endif

#endif  // __AbsoluteForceSensorService_hh__

