// This file is generated by omniidl (C++ backend) - omniORB_4_1. Do not edit.

#include "ImpedanceControllerService.hh"

OMNI_USING_NAMESPACE(omni)

static const char* _0RL_dyn_library_version = omniORB_4_1_dyn;

static ::CORBA::TypeCode::_Tracker _0RL_tcTrack(__FILE__);

static CORBA::TypeCode_ptr _0RL_tc_OpenHRP_mImpedanceControllerService_mDblSequence3 = CORBA::TypeCode::PR_alias_tc("IDL:OpenHRP/ImpedanceControllerService/DblSequence3:1.0", "DblSequence3", CORBA::TypeCode::PR_sequence_tc(3, CORBA::TypeCode::PR_double_tc(), &_0RL_tcTrack), &_0RL_tcTrack);


const CORBA::TypeCode_ptr OpenHRP::ImpedanceControllerService::_tc_DblSequence3 = _0RL_tc_OpenHRP_mImpedanceControllerService_mDblSequence3;

static CORBA::PR_structMember _0RL_structmember_OpenHRP_mImpedanceControllerService_mimpedanceParam[] = {
  {"name", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"base_name", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"target_name", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"M_p", CORBA::TypeCode::PR_double_tc()},
  {"D_p", CORBA::TypeCode::PR_double_tc()},
  {"K_p", CORBA::TypeCode::PR_double_tc()},
  {"M_r", CORBA::TypeCode::PR_double_tc()},
  {"D_r", CORBA::TypeCode::PR_double_tc()},
  {"K_r", CORBA::TypeCode::PR_double_tc()},
  {"ref_force", _0RL_tc_OpenHRP_mImpedanceControllerService_mDblSequence3},
  {"force_gain", _0RL_tc_OpenHRP_mImpedanceControllerService_mDblSequence3},
  {"ref_moment", _0RL_tc_OpenHRP_mImpedanceControllerService_mDblSequence3},
  {"moment_gain", _0RL_tc_OpenHRP_mImpedanceControllerService_mDblSequence3},
  {"sr_gain", CORBA::TypeCode::PR_double_tc()},
  {"avoid_gain", CORBA::TypeCode::PR_double_tc()},
  {"reference_gain", CORBA::TypeCode::PR_double_tc()},
  {"manipulability_limit", CORBA::TypeCode::PR_double_tc()}
};

#ifdef _0RL_tc_OpenHRP_mImpedanceControllerService_mimpedanceParam
#  undef _0RL_tc_OpenHRP_mImpedanceControllerService_mimpedanceParam
#endif
static CORBA::TypeCode_ptr _0RL_tc_OpenHRP_mImpedanceControllerService_mimpedanceParam = CORBA::TypeCode::PR_struct_tc("IDL:OpenHRP/ImpedanceControllerService/impedanceParam:1.0", "impedanceParam", _0RL_structmember_OpenHRP_mImpedanceControllerService_mimpedanceParam, 17, &_0RL_tcTrack);

const CORBA::TypeCode_ptr OpenHRP::ImpedanceControllerService::_tc_impedanceParam = _0RL_tc_OpenHRP_mImpedanceControllerService_mimpedanceParam;


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace OpenHRP { 
  const ::CORBA::TypeCode_ptr _tc_ImpedanceControllerService = CORBA::TypeCode::PR_interface_tc("IDL:OpenHRP/ImpedanceControllerService:1.0", "ImpedanceControllerService", &_0RL_tcTrack);
} 
#else
const ::CORBA::TypeCode_ptr OpenHRP::_tc_ImpedanceControllerService = CORBA::TypeCode::PR_interface_tc("IDL:OpenHRP/ImpedanceControllerService:1.0", "ImpedanceControllerService", &_0RL_tcTrack);
#endif

static void _0RL_OpenHRP_mImpedanceControllerService_mDblSequence3_marshal_fn(cdrStream& _s, void* _v)
{
  OpenHRP::ImpedanceControllerService::DblSequence3* _p = (OpenHRP::ImpedanceControllerService::DblSequence3*)_v;
  *_p >>= _s;
}
static void _0RL_OpenHRP_mImpedanceControllerService_mDblSequence3_unmarshal_fn(cdrStream& _s, void*& _v)
{
  OpenHRP::ImpedanceControllerService::DblSequence3* _p = new OpenHRP::ImpedanceControllerService::DblSequence3;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_OpenHRP_mImpedanceControllerService_mDblSequence3_destructor_fn(void* _v)
{
  OpenHRP::ImpedanceControllerService::DblSequence3* _p = (OpenHRP::ImpedanceControllerService::DblSequence3*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const OpenHRP::ImpedanceControllerService::DblSequence3& _s)
{
  OpenHRP::ImpedanceControllerService::DblSequence3* _p = new OpenHRP::ImpedanceControllerService::DblSequence3(_s);
  _a.PR_insert(_0RL_tc_OpenHRP_mImpedanceControllerService_mDblSequence3,
               _0RL_OpenHRP_mImpedanceControllerService_mDblSequence3_marshal_fn,
               _0RL_OpenHRP_mImpedanceControllerService_mDblSequence3_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, OpenHRP::ImpedanceControllerService::DblSequence3* _sp)
{
  _a.PR_insert(_0RL_tc_OpenHRP_mImpedanceControllerService_mDblSequence3,
               _0RL_OpenHRP_mImpedanceControllerService_mDblSequence3_marshal_fn,
               _0RL_OpenHRP_mImpedanceControllerService_mDblSequence3_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, OpenHRP::ImpedanceControllerService::DblSequence3*& _sp)
{
  return _a >>= (const OpenHRP::ImpedanceControllerService::DblSequence3*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const OpenHRP::ImpedanceControllerService::DblSequence3*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_OpenHRP_mImpedanceControllerService_mDblSequence3,
                    _0RL_OpenHRP_mImpedanceControllerService_mDblSequence3_unmarshal_fn,
                    _0RL_OpenHRP_mImpedanceControllerService_mDblSequence3_marshal_fn,
                    _0RL_OpenHRP_mImpedanceControllerService_mDblSequence3_destructor_fn,
                    _v)) {
    _sp = (const OpenHRP::ImpedanceControllerService::DblSequence3*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_OpenHRP_mImpedanceControllerService_mimpedanceParam_marshal_fn(cdrStream& _s, void* _v)
{
  OpenHRP::ImpedanceControllerService::impedanceParam* _p = (OpenHRP::ImpedanceControllerService::impedanceParam*)_v;
  *_p >>= _s;
}
static void _0RL_OpenHRP_mImpedanceControllerService_mimpedanceParam_unmarshal_fn(cdrStream& _s, void*& _v)
{
  OpenHRP::ImpedanceControllerService::impedanceParam* _p = new OpenHRP::ImpedanceControllerService::impedanceParam;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_OpenHRP_mImpedanceControllerService_mimpedanceParam_destructor_fn(void* _v)
{
  OpenHRP::ImpedanceControllerService::impedanceParam* _p = (OpenHRP::ImpedanceControllerService::impedanceParam*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const OpenHRP::ImpedanceControllerService::impedanceParam& _s)
{
  OpenHRP::ImpedanceControllerService::impedanceParam* _p = new OpenHRP::ImpedanceControllerService::impedanceParam(_s);
  _a.PR_insert(_0RL_tc_OpenHRP_mImpedanceControllerService_mimpedanceParam,
               _0RL_OpenHRP_mImpedanceControllerService_mimpedanceParam_marshal_fn,
               _0RL_OpenHRP_mImpedanceControllerService_mimpedanceParam_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, OpenHRP::ImpedanceControllerService::impedanceParam* _sp)
{
  _a.PR_insert(_0RL_tc_OpenHRP_mImpedanceControllerService_mimpedanceParam,
               _0RL_OpenHRP_mImpedanceControllerService_mimpedanceParam_marshal_fn,
               _0RL_OpenHRP_mImpedanceControllerService_mimpedanceParam_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, OpenHRP::ImpedanceControllerService::impedanceParam*& _sp)
{
  return _a >>= (const OpenHRP::ImpedanceControllerService::impedanceParam*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const OpenHRP::ImpedanceControllerService::impedanceParam*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_OpenHRP_mImpedanceControllerService_mimpedanceParam,
                    _0RL_OpenHRP_mImpedanceControllerService_mimpedanceParam_unmarshal_fn,
                    _0RL_OpenHRP_mImpedanceControllerService_mimpedanceParam_marshal_fn,
                    _0RL_OpenHRP_mImpedanceControllerService_mimpedanceParam_destructor_fn,
                    _v)) {
    _sp = (const OpenHRP::ImpedanceControllerService::impedanceParam*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_OpenHRP_mImpedanceControllerService_marshal_fn(cdrStream& _s, void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  omniObjRef::_marshal(_o, _s);
}
static void _0RL_OpenHRP_mImpedanceControllerService_unmarshal_fn(cdrStream& _s, void*& _v)
{
  omniObjRef* _o = omniObjRef::_unMarshal(OpenHRP::ImpedanceControllerService::_PD_repoId, _s);
  _v = _o;
}
static void _0RL_OpenHRP_mImpedanceControllerService_destructor_fn(void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  if (_o)
    omni::releaseObjRef(_o);
}

void operator<<=(::CORBA::Any& _a, OpenHRP::ImpedanceControllerService_ptr _o)
{
  OpenHRP::ImpedanceControllerService_ptr _no = OpenHRP::ImpedanceControllerService::_duplicate(_o);
  _a.PR_insert(OpenHRP::_tc_ImpedanceControllerService,
               _0RL_OpenHRP_mImpedanceControllerService_marshal_fn,
               _0RL_OpenHRP_mImpedanceControllerService_destructor_fn,
               _no->_PR_getobj());
}
void operator<<=(::CORBA::Any& _a, OpenHRP::ImpedanceControllerService_ptr* _op)
{
  _a.PR_insert(OpenHRP::_tc_ImpedanceControllerService,
               _0RL_OpenHRP_mImpedanceControllerService_marshal_fn,
               _0RL_OpenHRP_mImpedanceControllerService_destructor_fn,
               (*_op)->_PR_getobj());
  *_op = OpenHRP::ImpedanceControllerService::_nil();
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, OpenHRP::ImpedanceControllerService_ptr& _o)
{
  void* _v;
  if (_a.PR_extract(OpenHRP::_tc_ImpedanceControllerService,
                    _0RL_OpenHRP_mImpedanceControllerService_unmarshal_fn,
                    _0RL_OpenHRP_mImpedanceControllerService_marshal_fn,
                    _0RL_OpenHRP_mImpedanceControllerService_destructor_fn,
                    _v)) {
    omniObjRef* _r = (omniObjRef*)_v;
    if (_r)
      _o = (OpenHRP::ImpedanceControllerService_ptr)_r->_ptrToObjRef(OpenHRP::ImpedanceControllerService::_PD_repoId);
    else
      _o = OpenHRP::ImpedanceControllerService::_nil();
    return 1;
  }
  return 0;
}

