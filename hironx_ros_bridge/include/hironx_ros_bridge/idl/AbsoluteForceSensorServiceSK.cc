// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.

#include "AbsoluteForceSensorService.hh"
#include <omniORB4/IOP_S.h>
#include <omniORB4/IOP_C.h>
#include <omniORB4/callDescriptor.h>
#include <omniORB4/callHandle.h>
#include <omniORB4/objTracker.h>


OMNI_USING_NAMESPACE(omni)

static const char* _0RL_library_version = omniORB_4_1;



void
OpenHRP::AbsoluteForceSensorService::forcemomentOffsetParam::operator>>= (cdrStream &_n) const
{
  (const DblSequence3&) force_offset >>= _n;
  (const DblSequence3&) moment_offset >>= _n;
  (const DblSequence3&) link_offset_centroid >>= _n;
  link_offset_mass >>= _n;

}

void
OpenHRP::AbsoluteForceSensorService::forcemomentOffsetParam::operator<<= (cdrStream &_n)
{
  (DblSequence3&)force_offset <<= _n;
  (DblSequence3&)moment_offset <<= _n;
  (DblSequence3&)link_offset_centroid <<= _n;
  (::CORBA::Double&)link_offset_mass <<= _n;

}

OpenHRP::AbsoluteForceSensorService_ptr OpenHRP::AbsoluteForceSensorService_Helper::_nil() {
  return ::OpenHRP::AbsoluteForceSensorService::_nil();
}

::CORBA::Boolean OpenHRP::AbsoluteForceSensorService_Helper::is_nil(::OpenHRP::AbsoluteForceSensorService_ptr p) {
  return ::CORBA::is_nil(p);

}

void OpenHRP::AbsoluteForceSensorService_Helper::release(::OpenHRP::AbsoluteForceSensorService_ptr p) {
  ::CORBA::release(p);
}

void OpenHRP::AbsoluteForceSensorService_Helper::marshalObjRef(::OpenHRP::AbsoluteForceSensorService_ptr obj, cdrStream& s) {
  ::OpenHRP::AbsoluteForceSensorService::_marshalObjRef(obj, s);
}

OpenHRP::AbsoluteForceSensorService_ptr OpenHRP::AbsoluteForceSensorService_Helper::unmarshalObjRef(cdrStream& s) {
  return ::OpenHRP::AbsoluteForceSensorService::_unmarshalObjRef(s);
}

void OpenHRP::AbsoluteForceSensorService_Helper::duplicate(::OpenHRP::AbsoluteForceSensorService_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

OpenHRP::AbsoluteForceSensorService_ptr
OpenHRP::AbsoluteForceSensorService::_duplicate(::OpenHRP::AbsoluteForceSensorService_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

OpenHRP::AbsoluteForceSensorService_ptr
OpenHRP::AbsoluteForceSensorService::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


OpenHRP::AbsoluteForceSensorService_ptr
OpenHRP::AbsoluteForceSensorService::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

OpenHRP::AbsoluteForceSensorService_ptr
OpenHRP::AbsoluteForceSensorService::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_AbsoluteForceSensorService _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_AbsoluteForceSensorService* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_AbsoluteForceSensorService;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* OpenHRP::AbsoluteForceSensorService::_PD_repoId = "IDL:OpenHRP/AbsoluteForceSensorService:1.0";


OpenHRP::_objref_AbsoluteForceSensorService::~_objref_AbsoluteForceSensorService() {
  
}


OpenHRP::_objref_AbsoluteForceSensorService::_objref_AbsoluteForceSensorService(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::OpenHRP::AbsoluteForceSensorService::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
OpenHRP::_objref_AbsoluteForceSensorService::_ptrToObjRef(const char* id)
{
  if( id == ::OpenHRP::AbsoluteForceSensorService::_PD_repoId )
    return (::OpenHRP::AbsoluteForceSensorService_ptr) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::OpenHRP::AbsoluteForceSensorService::_PD_repoId) )
    return (::OpenHRP::AbsoluteForceSensorService_ptr) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cstring_i_cOpenHRP_mAbsoluteForceSensorService_mforcemomentOffsetParam
class _0RL_cd_ddd832d4f7db0dcb_00000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_ddd832d4f7db0dcb_00000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  OpenHRP::AbsoluteForceSensorService::forcemomentOffsetParam_var arg_1_;
  const OpenHRP::AbsoluteForceSensorService::forcemomentOffsetParam* arg_1;
  ::CORBA::Boolean result;
};

void _0RL_cd_ddd832d4f7db0dcb_00000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  (const OpenHRP::AbsoluteForceSensorService::forcemomentOffsetParam&) *arg_1 >>= _n;

}

void _0RL_cd_ddd832d4f7db0dcb_00000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = new OpenHRP::AbsoluteForceSensorService::forcemomentOffsetParam;
  (OpenHRP::AbsoluteForceSensorService::forcemomentOffsetParam&)arg_1_ <<= _n;
  arg_1 = &arg_1_.in();

}

void _0RL_cd_ddd832d4f7db0dcb_00000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_ddd832d4f7db0dcb_00000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

const char* const _0RL_cd_ddd832d4f7db0dcb_00000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_ddd832d4f7db0dcb_10000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_ddd832d4f7db0dcb_00000000* tcd = (_0RL_cd_ddd832d4f7db0dcb_00000000*)cd;
  OpenHRP::_impl_AbsoluteForceSensorService* impl = (OpenHRP::_impl_AbsoluteForceSensorService*) svnt->_ptrToInterface(OpenHRP::AbsoluteForceSensorService::_PD_repoId);
  tcd->result = impl->setForceMomentOffsetParam(tcd->arg_0, *tcd->arg_1);


}

::CORBA::Boolean OpenHRP::_objref_AbsoluteForceSensorService::setForceMomentOffsetParam(const char* name, const ::OpenHRP::AbsoluteForceSensorService::forcemomentOffsetParam& i_param)
{
  _0RL_cd_ddd832d4f7db0dcb_00000000 _call_desc(_0RL_lcfn_ddd832d4f7db0dcb_10000000, "setForceMomentOffsetParam", 26);
  _call_desc.arg_0 = name;
  _call_desc.arg_1 = &(::OpenHRP::AbsoluteForceSensorService::forcemomentOffsetParam&) i_param;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cstring_o_cOpenHRP_mAbsoluteForceSensorService_mforcemomentOffsetParam
class _0RL_cd_ddd832d4f7db0dcb_20000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_ddd832d4f7db0dcb_20000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  OpenHRP::AbsoluteForceSensorService::forcemomentOffsetParam_var arg_1;
  ::CORBA::Boolean result;
};

void _0RL_cd_ddd832d4f7db0dcb_20000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);

}

void _0RL_cd_ddd832d4f7db0dcb_20000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();

}

void _0RL_cd_ddd832d4f7db0dcb_20000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);
  (const OpenHRP::AbsoluteForceSensorService::forcemomentOffsetParam&) arg_1 >>= _n;

}

void _0RL_cd_ddd832d4f7db0dcb_20000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();
  arg_1 = new OpenHRP::AbsoluteForceSensorService::forcemomentOffsetParam;
  (OpenHRP::AbsoluteForceSensorService::forcemomentOffsetParam&)arg_1 <<= _n;

}

const char* const _0RL_cd_ddd832d4f7db0dcb_20000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_ddd832d4f7db0dcb_30000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_ddd832d4f7db0dcb_20000000* tcd = (_0RL_cd_ddd832d4f7db0dcb_20000000*)cd;
  OpenHRP::_impl_AbsoluteForceSensorService* impl = (OpenHRP::_impl_AbsoluteForceSensorService*) svnt->_ptrToInterface(OpenHRP::AbsoluteForceSensorService::_PD_repoId);
  tcd->result = impl->getForceMomentOffsetParam(tcd->arg_0, tcd->arg_1.out());


}

::CORBA::Boolean OpenHRP::_objref_AbsoluteForceSensorService::getForceMomentOffsetParam(const char* name, ::OpenHRP::AbsoluteForceSensorService::forcemomentOffsetParam_out i_param)
{
  _0RL_cd_ddd832d4f7db0dcb_20000000 _call_desc(_0RL_lcfn_ddd832d4f7db0dcb_30000000, "getForceMomentOffsetParam", 26);
  _call_desc.arg_0 = name;

  _invoke(_call_desc);
  i_param = _call_desc.arg_1._retn();
  return _call_desc.result;


}
OpenHRP::_pof_AbsoluteForceSensorService::~_pof_AbsoluteForceSensorService() {}


omniObjRef*
OpenHRP::_pof_AbsoluteForceSensorService::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::OpenHRP::_objref_AbsoluteForceSensorService(ior, id);
}


::CORBA::Boolean
OpenHRP::_pof_AbsoluteForceSensorService::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::OpenHRP::AbsoluteForceSensorService::_PD_repoId) )
    return 1;
  
  return 0;
}

const OpenHRP::_pof_AbsoluteForceSensorService _the_pof_OpenHRP_mAbsoluteForceSensorService;

OpenHRP::_impl_AbsoluteForceSensorService::~_impl_AbsoluteForceSensorService() {}


::CORBA::Boolean
OpenHRP::_impl_AbsoluteForceSensorService::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "setForceMomentOffsetParam") ) {

    _0RL_cd_ddd832d4f7db0dcb_00000000 _call_desc(_0RL_lcfn_ddd832d4f7db0dcb_10000000, "setForceMomentOffsetParam", 26, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getForceMomentOffsetParam") ) {

    _0RL_cd_ddd832d4f7db0dcb_20000000 _call_desc(_0RL_lcfn_ddd832d4f7db0dcb_30000000, "getForceMomentOffsetParam", 26, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
OpenHRP::_impl_AbsoluteForceSensorService::_ptrToInterface(const char* id)
{
  if( id == ::OpenHRP::AbsoluteForceSensorService::_PD_repoId )
    return (::OpenHRP::_impl_AbsoluteForceSensorService*) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::OpenHRP::AbsoluteForceSensorService::_PD_repoId) )
    return (::OpenHRP::_impl_AbsoluteForceSensorService*) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
OpenHRP::_impl_AbsoluteForceSensorService::_mostDerivedRepoId()
{
  return ::OpenHRP::AbsoluteForceSensorService::_PD_repoId;
}

POA_OpenHRP::AbsoluteForceSensorService::~AbsoluteForceSensorService() {}

