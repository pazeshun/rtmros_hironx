// Generated by gencpp from file hironx_ros_bridge/OpenHRP_ImpedanceControllerService_getImpedanceControllerParamResponse.msg
// DO NOT EDIT!


#ifndef HIRONX_ROS_BRIDGE_MESSAGE_OPENHRP_IMPEDANCECONTROLLERSERVICE_GETIMPEDANCECONTROLLERPARAMRESPONSE_H
#define HIRONX_ROS_BRIDGE_MESSAGE_OPENHRP_IMPEDANCECONTROLLERSERVICE_GETIMPEDANCECONTROLLERPARAMRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <hironx_ros_bridge/OpenHRP_ImpedanceControllerService_impedanceParam.h>

namespace hironx_ros_bridge
{
template <class ContainerAllocator>
struct OpenHRP_ImpedanceControllerService_getImpedanceControllerParamResponse_
{
  typedef OpenHRP_ImpedanceControllerService_getImpedanceControllerParamResponse_<ContainerAllocator> Type;

  OpenHRP_ImpedanceControllerService_getImpedanceControllerParamResponse_()
    : operation_return(false)
    , i_param()  {
    }
  OpenHRP_ImpedanceControllerService_getImpedanceControllerParamResponse_(const ContainerAllocator& _alloc)
    : operation_return(false)
    , i_param(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _operation_return_type;
  _operation_return_type operation_return;

   typedef  ::hironx_ros_bridge::OpenHRP_ImpedanceControllerService_impedanceParam_<ContainerAllocator>  _i_param_type;
  _i_param_type i_param;




  typedef boost::shared_ptr< ::hironx_ros_bridge::OpenHRP_ImpedanceControllerService_getImpedanceControllerParamResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hironx_ros_bridge::OpenHRP_ImpedanceControllerService_getImpedanceControllerParamResponse_<ContainerAllocator> const> ConstPtr;

}; // struct OpenHRP_ImpedanceControllerService_getImpedanceControllerParamResponse_

typedef ::hironx_ros_bridge::OpenHRP_ImpedanceControllerService_getImpedanceControllerParamResponse_<std::allocator<void> > OpenHRP_ImpedanceControllerService_getImpedanceControllerParamResponse;

typedef boost::shared_ptr< ::hironx_ros_bridge::OpenHRP_ImpedanceControllerService_getImpedanceControllerParamResponse > OpenHRP_ImpedanceControllerService_getImpedanceControllerParamResponsePtr;
typedef boost::shared_ptr< ::hironx_ros_bridge::OpenHRP_ImpedanceControllerService_getImpedanceControllerParamResponse const> OpenHRP_ImpedanceControllerService_getImpedanceControllerParamResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hironx_ros_bridge::OpenHRP_ImpedanceControllerService_getImpedanceControllerParamResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hironx_ros_bridge::OpenHRP_ImpedanceControllerService_getImpedanceControllerParamResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace hironx_ros_bridge

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'hironx_ros_bridge': ['/home/pazeshun/test_ws/src/rtmros_hironx/hironx_ros_bridge/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::hironx_ros_bridge::OpenHRP_ImpedanceControllerService_getImpedanceControllerParamResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hironx_ros_bridge::OpenHRP_ImpedanceControllerService_getImpedanceControllerParamResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hironx_ros_bridge::OpenHRP_ImpedanceControllerService_getImpedanceControllerParamResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hironx_ros_bridge::OpenHRP_ImpedanceControllerService_getImpedanceControllerParamResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hironx_ros_bridge::OpenHRP_ImpedanceControllerService_getImpedanceControllerParamResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hironx_ros_bridge::OpenHRP_ImpedanceControllerService_getImpedanceControllerParamResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hironx_ros_bridge::OpenHRP_ImpedanceControllerService_getImpedanceControllerParamResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9851fa88e9d978aa6e92eeed36360c28";
  }

  static const char* value(const ::hironx_ros_bridge::OpenHRP_ImpedanceControllerService_getImpedanceControllerParamResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9851fa88e9d978aaULL;
  static const uint64_t static_value2 = 0x6e92eeed36360c28ULL;
};

template<class ContainerAllocator>
struct DataType< ::hironx_ros_bridge::OpenHRP_ImpedanceControllerService_getImpedanceControllerParamResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hironx_ros_bridge/OpenHRP_ImpedanceControllerService_getImpedanceControllerParamResponse";
  }

  static const char* value(const ::hironx_ros_bridge::OpenHRP_ImpedanceControllerService_getImpedanceControllerParamResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hironx_ros_bridge::OpenHRP_ImpedanceControllerService_getImpedanceControllerParamResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool operation_return\n\
OpenHRP_ImpedanceControllerService_impedanceParam i_param\n\
\n\
\n\
================================================================================\n\
MSG: hironx_ros_bridge/OpenHRP_ImpedanceControllerService_impedanceParam\n\
string name\n\
string base_name\n\
string target_name\n\
float64 M_p\n\
float64 D_p\n\
float64 K_p\n\
float64 M_r\n\
float64 D_r\n\
float64 K_r\n\
float64[3] ref_force\n\
float64[3] force_gain\n\
float64[3] ref_moment\n\
float64[3] moment_gain\n\
float64 sr_gain\n\
float64 avoid_gain\n\
float64 reference_gain\n\
float64 manipulability_limit\n\
";
  }

  static const char* value(const ::hironx_ros_bridge::OpenHRP_ImpedanceControllerService_getImpedanceControllerParamResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hironx_ros_bridge::OpenHRP_ImpedanceControllerService_getImpedanceControllerParamResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.operation_return);
      stream.next(m.i_param);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct OpenHRP_ImpedanceControllerService_getImpedanceControllerParamResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hironx_ros_bridge::OpenHRP_ImpedanceControllerService_getImpedanceControllerParamResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hironx_ros_bridge::OpenHRP_ImpedanceControllerService_getImpedanceControllerParamResponse_<ContainerAllocator>& v)
  {
    s << indent << "operation_return: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.operation_return);
    s << indent << "i_param: ";
    s << std::endl;
    Printer< ::hironx_ros_bridge::OpenHRP_ImpedanceControllerService_impedanceParam_<ContainerAllocator> >::stream(s, indent + "  ", v.i_param);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HIRONX_ROS_BRIDGE_MESSAGE_OPENHRP_IMPEDANCECONTROLLERSERVICE_GETIMPEDANCECONTROLLERPARAMRESPONSE_H
